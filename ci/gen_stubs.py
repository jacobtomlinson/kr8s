# SPDX-FileCopyrightText: Copyright (c) 2024, Kr8s Developers (See LICENSE for list)
# SPDX-License-Identifier: BSD 3-Clause License
# Update sync code stubs
import ast
import subprocess

ELLIPSIS_NODE = ast.parse("...").body
# TODO: Remove unused imports

# Load the AST for the base object definitions
with open("kr8s/_objects.py") as base_source_fh:
    base_source = base_source_fh.read()
    base_tree = ast.parse(base_source)

# Load the AST for the sync API
with open("kr8s/objects.py") as source_fh:
    source = source_fh.read()
    tree = ast.parse(source)

# Update module docstring
if isinstance(tree.body[0], ast.Expr) and isinstance(tree.body[0].value, ast.Constant):
    tree.body[0].value.value += (
        "\n"
        "WARNING: This typing stub file was generated by ci/gen_stubs.py\n"
        "DO NOT MODIFY DIRECTLY\n"
    )


# Add all imports from base_tree (these will be pruned later)
for node in base_tree.body:
    if isinstance(node, ast.Import):
        tree.body.insert(2, node)
    elif isinstance(node, ast.ImportFrom):
        # If not __future__ import, add it
        if node.module != "__future__":
            tree.body.insert(2, node)

for node_index, node in enumerate(tree.body):

    # # Remove non-relative imports
    # if isinstance(node, ast.ImportFrom):
    #     if node.level != 1:
    #         tree.body.remove(node)

    # Update class definitions
    if isinstance(node, ast.ClassDef):
        # Replace the class definitions with the bass class
        for base_node in base_tree.body:
            if isinstance(base_node, ast.ClassDef) and base_node.name == node.name:
                if node.name == "APIObject":
                    base_node.bases = node.bases

                # Replace all methods with type stubs
                for subnode_index, subnode in enumerate(base_node.body):
                    if isinstance(subnode, ast.FunctionDef):
                        comment = [subnode.body[0]]  if isinstance(subnode.body[0], ast.Expr) else []
                        subnode.body = comment + ELLIPSIS_NODE
                    elif isinstance(subnode, ast.AsyncFunctionDef):
                        comment = [subnode.body[0]]  if isinstance(subnode.body[0], ast.Expr) else []
                        base_node.body[subnode_index] = ast.FunctionDef(
                            name=subnode.name,
                            args=subnode.args,
                            body=comment + ELLIPSIS_NODE,
                            decorator_list=subnode.decorator_list,
                            returns=subnode.returns,
                            type_comment=subnode.type_comment,
                            type_params=subnode.type_params,
                            lineno=subnode.lineno,
                        )
                        pass
                    elif isinstance(subnode, ast.AnnAssign):
                        # Remove value
                        subnode.value = None
                    else:
                        pass

                tree.body[node_index] = base_node

    elif isinstance(node, ast.FunctionDef):
        # Replace all functions with version from bass_tree
        for base_node in base_tree.body:
            if (
                isinstance(base_node, ast.FunctionDef)
                or isinstance(base_node, ast.AsyncFunctionDef)
            ) and base_node.name == node.name:
                # Replace the function definition
                comment = [base_node.body[0]]  if isinstance(base_node.body[0], ast.Expr) else []
                tree.body[node_index] = ast.FunctionDef(
                    name=base_node.name,
                    args=base_node.args,
                    body=comment+ELLIPSIS_NODE,
                    decorator_list=base_node.decorator_list,
                    returns=base_node.returns,
                    type_comment=base_node.type_comment,
                    type_params=base_node.type_params,
                    lineno=base_node.lineno,
                )
    else:
        pass

with open("kr8s/objects.pyi", "w") as target_fh:
    target_fh.write(ast.unparse(tree))

# Run black and ruff
subprocess.run(["black", "kr8s/objects.pyi"])
subprocess.run(["ruff", "check", "--fix", "kr8s/objects.pyi"])
