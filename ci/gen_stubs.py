# SPDX-FileCopyrightText: Copyright (c) 2024, Kr8s Developers (See LICENSE for list)
# SPDX-License-Identifier: BSD 3-Clause License
# Update sync code stubs
import ast

import kr8s._objects as base_objects

with open("kr8s/_objects.py") as base_source_fh:
    base_source = base_source_fh.read()
    base_tree = ast.parse(base_source)


with open("kr8s/objects.py") as source_fh:
    source = source_fh.read()
    tree = ast.parse(source)

    # Update module docstring
    if isinstance(tree.body[0], ast.Expr) and isinstance(
        tree.body[0].value, ast.Constant
    ):
        tree.body[0].value.value += (
            "\n"
            "WARNING: This typing stub file was generated by ci/gen_stubs.py\n"
            "DO NOT MODIFY DIRECTLY\n"
        )

    for node in tree.body:
        if isinstance(node, ast.ImportFrom):
            if node.level != 1:
                tree.body.remove(node)

        elif isinstance(node, ast.ClassDef):
            # Clear the sync decorator
            for decorator in node.decorator_list:
                if isinstance(decorator, ast.Name) and decorator.id == "sync":
                    node.decorator_list.remove(decorator)
            node.body = [subnode for subnode in node.body if not isinstance(subnode, ast.Assign)]
            # Populate public methods from base classes
            for base in node.bases:
                if isinstance(base, ast.Name):
                    # import the base class in this script with importlib
                    base_class = getattr(base_objects, base.id[1:])
                    # iterate over the methods of the base class
                    for base_class_attr in base_class.__dict__.keys():
                        method = getattr(base_class, base_class_attr)
                        if callable(method):
                            if not base_class_attr.startswith("_") and not base_class_attr.startswith("async_"):
                                node.body.append(ast.parse(f"def {base_class_attr}(self): ...").body[0])
                                

        else:
            pass

    with open("kr8s/objects_tmp.pyi", "w") as target_fh:
        target_fh.write(ast.unparse(tree))
