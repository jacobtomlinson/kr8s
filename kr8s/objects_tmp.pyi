"""Objects to represent Kubernetes resources.

This module provides classes that represent Kubernetes resources.
These classes are used to interact with resources in the Kubernetes API server.

WARNING: This typing stub file was generated by ci/gen_stubs.py
DO NOT MODIFY DIRECTLY
"""
from ._async_utils import run_sync, sync
from ._objects import APIObject as _APIObject
from ._objects import Binding as _Binding
from ._objects import ClusterRole as _ClusterRole
from ._objects import ClusterRoleBinding as _ClusterRoleBinding
from ._objects import ComponentStatus as _ComponentStatus
from ._objects import ConfigMap as _ConfigMap
from ._objects import ControllerRevision as _ControllerRevision
from ._objects import CronJob as _CronJob
from ._objects import CustomResourceDefinition as _CustomResourceDefinition
from ._objects import DaemonSet as _DaemonSet
from ._objects import Deployment as _Deployment
from ._objects import Endpoints as _Endpoints
from ._objects import Event as _Event
from ._objects import HorizontalPodAutoscaler as _HorizontalPodAutoscaler
from ._objects import Ingress as _Ingress
from ._objects import IngressClass as _IngressClass
from ._objects import Job as _Job
from ._objects import LimitRange as _LimitRange
from ._objects import Namespace as _Namespace
from ._objects import NetworkPolicy as _NetworkPolicy
from ._objects import Node as _Node
from ._objects import PersistentVolume as _PersistentVolume
from ._objects import PersistentVolumeClaim as _PersistentVolumeClaim
from ._objects import Pod as _Pod
from ._objects import PodDisruptionBudget as _PodDisruptionBudget
from ._objects import PodTemplate as _PodTemplate
from ._objects import ReplicaSet as _ReplicaSet
from ._objects import ReplicationController as _ReplicationController
from ._objects import ResourceQuota as _ResourceQuota
from ._objects import Role as _Role
from ._objects import RoleBinding as _RoleBinding
from ._objects import Secret as _Secret
from ._objects import Service as _Service
from ._objects import ServiceAccount as _ServiceAccount
from ._objects import StatefulSet as _StatefulSet
from ._objects import Table as _Table
from ._objects import get_class as _get_class
from ._objects import new_class as _new_class
from ._objects import object_from_name_type as _object_from_name_type
from ._objects import object_from_spec as _object_from_spec
from ._objects import objects_from_files as _objects_from_files

class APIObject(_APIObject):

    def get(self):
        ...

    def exists(self):
        ...

    def create(self):
        ...

    def delete(self):
        ...

    def refresh(self):
        ...

    def patch(self):
        ...

    def scale(self):
        ...

    def watch(self):
        ...

    def wait(self):
        ...

    def annotate(self):
        ...

    def label(self):
        ...

    def keys(self):
        ...

    def set_owner(self):
        ...

    def adopt(self):
        ...

    def to_dict(self):
        ...

    def to_lightkube(self):
        ...

    def to_pykube(self):
        ...

    def gen(self):
        ...

    def list(self):
        ...

class Binding(_Binding):

class ComponentStatus(_ComponentStatus):

class ConfigMap(_ConfigMap):

class Endpoints(_Endpoints):

class Event(_Event):

class LimitRange(_LimitRange):

class Namespace(_Namespace):

class Node(_Node):

    def cordon(self):
        ...

    def uncordon(self):
        ...

class PersistentVolume(_PersistentVolume):

class PersistentVolumeClaim(_PersistentVolumeClaim):

class Pod(_Pod):

    def ready(self):
        ...

    def logs(self):
        ...

    def portforward(self):
        ...

    def exec(self):
        ...

    def gen(self):
        ...

class PodTemplate(_PodTemplate):

class ReplicationController(_ReplicationController):

    def ready(self):
        ...

class ResourceQuota(_ResourceQuota):

class Secret(_Secret):

class Service(_Service):

    def proxy_http_request(self):
        ...

    def proxy_http_get(self):
        ...

    def proxy_http_post(self):
        ...

    def proxy_http_put(self):
        ...

    def proxy_http_delete(self):
        ...

    def ready_pods(self):
        ...

    def ready(self):
        ...

    def portforward(self):
        ...

class ServiceAccount(_ServiceAccount):

class ControllerRevision(_ControllerRevision):

class DaemonSet(_DaemonSet):

class Deployment(_Deployment):

    def pods(self):
        ...

    def ready(self):
        ...

class ReplicaSet(_ReplicaSet):

class StatefulSet(_StatefulSet):

class HorizontalPodAutoscaler(_HorizontalPodAutoscaler):

class CronJob(_CronJob):

class Job(_Job):

class Ingress(_Ingress):

class IngressClass(_IngressClass):

class NetworkPolicy(_NetworkPolicy):

class PodDisruptionBudget(_PodDisruptionBudget):

class ClusterRoleBinding(_ClusterRoleBinding):

class ClusterRole(_ClusterRole):

class RoleBinding(_RoleBinding):

class Role(_Role):

class CustomResourceDefinition(_CustomResourceDefinition):

class Table(_Table):
object_from_name_type = run_sync(partial(_object_from_name_type, _asyncio=False))
objects_from_files = run_sync(partial(_objects_from_files, _asyncio=False))
get_class = partial(_get_class, _asyncio=False)
new_class = partial(_new_class, asyncio=False)
object_from_spec = partial(_object_from_spec, _asyncio=False)