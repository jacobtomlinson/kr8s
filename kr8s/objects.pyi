"""Objects to represent Kubernetes resources.

This module provides classes that represent Kubernetes resources.
These classes are used to interact with resources in the Kubernetes API server.

WARNING: This typing stub file was generated by ci/gen_stubs.py
DO NOT MODIFY DIRECTLY
"""

from __future__ import annotations

import contextlib
import json
import pathlib
import re
import time
from functools import partial
from typing import Any, AsyncGenerator, BinaryIO, List, Literal, cast

import anyio
import httpx
import jsonpath
import yaml
from box import Box

import kr8s
import kr8s.asyncio
from kr8s._api import Api
from kr8s._async_utils import sync
from kr8s._data_utils import (
    dict_to_selector,
    dot_to_nested_dict,
    list_dict_unpack,
    xdict,
)
from kr8s._exceptions import NotFoundError, ServerError
from kr8s._exec import Exec
from kr8s._types import SpecType, SupportsKeysAndGetItem
from kr8s.asyncio.portforward import PortForward as AsyncPortForward
from kr8s.portforward import PortForward as SyncPortForward

from ._async_utils import run_sync, sync
from ._objects import APIObject as _APIObject
from ._objects import Binding as _Binding
from ._objects import ClusterRole as _ClusterRole
from ._objects import ClusterRoleBinding as _ClusterRoleBinding
from ._objects import ComponentStatus as _ComponentStatus
from ._objects import ConfigMap as _ConfigMap
from ._objects import ControllerRevision as _ControllerRevision
from ._objects import CronJob as _CronJob
from ._objects import CustomResourceDefinition as _CustomResourceDefinition
from ._objects import DaemonSet as _DaemonSet
from ._objects import Deployment as _Deployment
from ._objects import Endpoints as _Endpoints
from ._objects import Event as _Event
from ._objects import HorizontalPodAutoscaler as _HorizontalPodAutoscaler
from ._objects import Ingress as _Ingress
from ._objects import IngressClass as _IngressClass
from ._objects import Job as _Job
from ._objects import LimitRange as _LimitRange
from ._objects import Namespace as _Namespace
from ._objects import NetworkPolicy as _NetworkPolicy
from ._objects import Node as _Node
from ._objects import PersistentVolume as _PersistentVolume
from ._objects import PersistentVolumeClaim as _PersistentVolumeClaim
from ._objects import Pod as _Pod
from ._objects import PodDisruptionBudget as _PodDisruptionBudget
from ._objects import PodTemplate as _PodTemplate
from ._objects import ReplicaSet as _ReplicaSet
from ._objects import ReplicationController as _ReplicationController
from ._objects import ResourceQuota as _ResourceQuota
from ._objects import Role as _Role
from ._objects import RoleBinding as _RoleBinding
from ._objects import Secret as _Secret
from ._objects import Service as _Service
from ._objects import ServiceAccount as _ServiceAccount
from ._objects import StatefulSet as _StatefulSet
from ._objects import Table as _Table
from ._objects import get_class as _get_class
from ._objects import new_class as _new_class
from ._objects import object_from_name_type as _object_from_name_type
from ._objects import object_from_spec as _object_from_spec
from ._objects import objects_from_files as _objects_from_files

class APIObject(_APIObject):
    """Base class for Kubernetes objects."""

    version: str
    endpoint: str
    kind: str
    plural: str
    singular: str
    namespaced: bool
    scalable: bool
    scalable_spec: str
    _asyncio: bool

    def __init__(
        self, resource: SpecType, namespace: str | None = None, api: Api | None = None
    ) -> None: ...
    def __await__(self): ...
    def __repr__(self): ...
    def __str__(self): ...
    def __eq__(self, other): ...
    @property
    def api(self): ...
    @api.setter
    def api(self, value): ...
    @property
    def raw(self) -> Any: ...
    @raw.setter
    def raw(self, value: Any) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def namespace(self) -> str | None: ...
    @namespace.setter
    def namespace(self, value: str) -> None: ...
    @property
    def metadata(self) -> Box: ...
    @metadata.setter
    def metadata(self, value: dict) -> None: ...
    @property
    def spec(self) -> Box: ...
    @spec.setter
    def spec(self, value: dict) -> None: ...
    @property
    def status(self) -> Box: ...
    @status.setter
    def status(self, value: dict) -> None: ...
    @property
    def labels(self) -> Box: ...
    @labels.setter
    def labels(self, value: dict) -> None: ...
    @property
    def annotations(self) -> Box: ...
    @annotations.setter
    def annotations(self, value: dict) -> None: ...
    @property
    def replicas(self) -> int: ...
    @replicas.setter
    def replicas(self, value: int) -> None: ...
    @classmethod
    def get(
        cls,
        name: str | None = None,
        namespace: str | None = None,
        api: Api | None = None,
        label_selector: str | dict[str, str] | None = None,
        field_selector: str | dict[str, str] | None = None,
        timeout: int = 2,
        **kwargs,
    ) -> APIObject: ...
    def exists(self, ensure=False) -> bool: ...
    def async_exists(self, ensure=False) -> bool: ...
    def create(self) -> None: ...
    def delete(self, propagation_policy: str | None = None) -> None: ...
    def refresh(self) -> None: ...
    def async_refresh(self) -> None: ...
    def patch(self, patch, *, subresource=None, type=None) -> None: ...
    def async_patch(self, patch: dict, *, subresource=None, type=None) -> None: ...
    def scale(self, replicas: int | None = None) -> None: ...
    def async_watch(self): ...
    def watch(self): ...
    def _test_conditions(
        self, conditions: list, mode: Literal["any", "all"] = "any"
    ) -> bool: ...
    def wait(
        self,
        conditions: list[str] | str,
        mode: Literal["any", "all"] = "any",
        timeout: int | None = None,
    ): ...
    def annotate(self, annotations: dict | None = None, **kwargs) -> None: ...
    def label(self, labels: dict | None = None, **kwargs) -> None: ...
    def keys(self) -> list: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def set_owner(self, owner: APIObject) -> None: ...
    def async_set_owner(self, owner: APIObject) -> None: ...
    def adopt(self, child: APIObject) -> None: ...
    def to_dict(self) -> dict: ...
    def to_lightkube(self) -> Any: ...
    def to_pykube(self, api) -> Any: ...
    @classmethod
    def gen(cls, *args, **kwargs): ...
    @classmethod
    def list(cls, **kwargs) -> APIObject | list[APIObject]: ...

class Binding(APIObject):
    """A Kubernetes Binding."""

    version = "v1"
    endpoint = "bindings"
    kind = "Binding"
    plural = "bindings"
    singular = "binding"
    namespaced = True

class ComponentStatus(APIObject):
    """A Kubernetes ComponentStatus."""

    version = "v1"
    endpoint = "componentstatuses"
    kind = "ComponentStatus"
    plural = "componentstatuses"
    singular = "componentstatus"
    namespaced = False

class ConfigMap(APIObject):
    """A Kubernetes ConfigMap."""

    version = "v1"
    endpoint = "configmaps"
    kind = "ConfigMap"
    plural = "configmaps"
    singular = "configmap"
    namespaced = True

    @property
    def data(self) -> Box: ...
    @data.setter
    def data(self, value: dict) -> None: ...

class Endpoints(APIObject):
    """A Kubernetes Endpoints."""

    version = "v1"
    endpoint = "endpoints"
    kind = "Endpoints"
    plural = "endpoints"
    singular = "endpoint"
    namespaced = True

class Event(APIObject):
    """A Kubernetes Event."""

    version = "v1"
    endpoint = "events"
    kind = "Event"
    plural = "events"
    singular = "event"
    namespaced = True

class LimitRange(APIObject):
    """A Kubernetes LimitRange."""

    version = "v1"
    endpoint = "limitranges"
    kind = "LimitRange"
    plural = "limitranges"
    singular = "limitrange"
    namespaced = True

class Namespace(APIObject):
    """A Kubernetes Namespace."""

    version = "v1"
    endpoint = "namespaces"
    kind = "Namespace"
    plural = "namespaces"
    singular = "namespace"
    namespaced = False

class Node(APIObject):
    """A Kubernetes Node."""

    version = "v1"
    endpoint = "nodes"
    kind = "Node"
    plural = "nodes"
    singular = "node"
    namespaced = False

    @property
    def unschedulable(self): ...
    def cordon(self) -> None: ...
    def uncordon(self) -> None: ...

class PersistentVolume(APIObject):
    """A Kubernetes PersistentVolume."""

    version = "v1"
    endpoint = "persistentvolumes"
    kind = "PersistentVolume"
    plural = "persistentvolumes"
    singular = "persistentvolume"
    namespaced = False

class PersistentVolumeClaim(APIObject):
    """A Kubernetes PersistentVolumeClaim."""

    version = "v1"
    endpoint = "persistentvolumeclaims"
    kind = "PersistentVolumeClaim"
    plural = "persistentvolumeclaims"
    singular = "persistentvolumeclaim"
    namespaced = True

class Pod(APIObject):
    """A Kubernetes Pod."""

    version = "v1"
    endpoint = "pods"
    kind = "Pod"
    plural = "pods"
    singular = "pod"
    namespaced = True

    def async_ready(self) -> bool: ...
    def ready(self) -> bool: ...
    def logs(
        self,
        container=None,
        pretty=None,
        previous=False,
        since_seconds=None,
        since_time=None,
        timestamps=False,
        tail_lines=None,
        limit_bytes=None,
        follow=False,
        timeout=3600,
    ) -> AsyncGenerator[str]: ...
    def portforward(
        self,
        remote_port: int,
        local_port: int | None = None,
        address: list[str] | str = "127.0.0.1",
    ) -> SyncPortForward | AsyncPortForward: ...
    def async_exec(
        self,
        command: list[str],
        *,
        container: str | None = None,
        stdin: str | BinaryIO | None = None,
        stdout: BinaryIO | None = None,
        stderr: BinaryIO | None = None,
        check: bool = True,
        capture_output: bool = True,
    ): ...
    def exec(
        self,
        command: list[str],
        *,
        container: str | None = None,
        stdin: str | BinaryIO | None = None,
        stdout: BinaryIO | None = None,
        stderr: BinaryIO | None = None,
        check: bool = True,
        capture_output: bool = True,
    ): ...
    @classmethod
    def gen(
        cls,
        *,
        name=None,
        generate_name=None,
        image=None,
        namespace=None,
        annotations=None,
        command=None,
        env=None,
        resources=None,
        image_pull_policy=None,
        labels=None,
        ports=None,
        restart="Always",
    ): ...

class PodTemplate(APIObject):
    """A Kubernetes PodTemplate."""

    version = "v1"
    endpoint = "podtemplates"
    kind = "PodTemplate"
    plural = "podtemplates"
    singular = "podtemplate"
    namespaced = True

class ReplicationController(APIObject):
    """A Kubernetes ReplicationController."""

    version = "v1"
    endpoint = "replicationcontrollers"
    kind = "ReplicationController"
    plural = "replicationcontrollers"
    singular = "replicationcontroller"
    namespaced = True
    scalable = True

    def ready(self): ...

class ResourceQuota(APIObject):
    """A Kubernetes ResourceQuota."""

    version = "v1"
    endpoint = "resourcequotas"
    kind = "ResourceQuota"
    plural = "resourcequotas"
    singular = "resourcequota"
    namespaced = True

class Secret(APIObject):
    """A Kubernetes Secret."""

    version = "v1"
    endpoint = "secrets"
    kind = "Secret"
    plural = "secrets"
    singular = "secret"
    namespaced = True

    @property
    def data(self) -> Box: ...
    @data.setter
    def data(self, value: dict) -> None: ...

class Service(APIObject):
    """A Kubernetes Service."""

    version = "v1"
    endpoint = "services"
    kind = "Service"
    plural = "services"
    singular = "service"
    namespaced = True

    def proxy_http_request(
        self, method: str, path: str, port: int | None = None, **kwargs: Any
    ) -> httpx.Response: ...
    def async_proxy_http_request(
        self, method: str, path: str, port: int | None = None, **kwargs: Any
    ) -> httpx.Response: ...
    def proxy_http_get(
        self, path: str, port: int | None = None, **kwargs
    ) -> httpx.Response: ...
    def proxy_http_post(self, path: str, port: int | None = None, **kwargs) -> None: ...
    def proxy_http_put(
        self, path: str, port: int | None = None, **kwargs
    ) -> httpx.Response: ...
    def proxy_http_delete(
        self, path: str, port: int | None = None, **kwargs
    ) -> httpx.Response: ...
    def ready_pods(self) -> list[Pod]: ...
    def async_ready_pods(self) -> list[Pod]: ...
    def ready(self) -> bool: ...
    def portforward(
        self,
        remote_port: int,
        local_port: int | None = None,
        address: str | list[str] = "127.0.0.1",
    ) -> SyncPortForward | AsyncPortForward: ...

class ServiceAccount(APIObject):
    """A Kubernetes ServiceAccount."""

    version = "v1"
    endpoint = "serviceaccounts"
    kind = "ServiceAccount"
    plural = "serviceaccounts"
    singular = "serviceaccount"
    namespaced = True

class ControllerRevision(APIObject):
    """A Kubernetes ControllerRevision."""

    version = "apps/v1"
    endpoint = "controllerrevisions"
    kind = "ControllerRevision"
    plural = "controllerrevisions"
    singular = "controllerrevision"
    namespaced = True

class DaemonSet(APIObject):
    """A Kubernetes DaemonSet."""

    version = "apps/v1"
    endpoint = "daemonsets"
    kind = "DaemonSet"
    plural = "daemonsets"
    singular = "daemonset"
    namespaced = True

class Deployment(APIObject):
    """A Kubernetes Deployment."""

    version = "apps/v1"
    endpoint = "deployments"
    kind = "Deployment"
    plural = "deployments"
    singular = "deployment"
    namespaced = True
    scalable = True

    def pods(self) -> list[Pod]: ...
    def ready(self): ...

class ReplicaSet(APIObject):
    """A Kubernetes ReplicaSet."""

    version = "apps/v1"
    endpoint = "replicasets"
    kind = "ReplicaSet"
    plural = "replicasets"
    singular = "replicaset"
    namespaced = True
    scalable = True

class StatefulSet(APIObject):
    """A Kubernetes StatefulSet."""

    version = "apps/v1"
    endpoint = "statefulsets"
    kind = "StatefulSet"
    plural = "statefulsets"
    singular = "statefulset"
    namespaced = True
    scalable = True

class HorizontalPodAutoscaler(APIObject):
    """A Kubernetes HorizontalPodAutoscaler."""

    version = "autoscaling/v2"
    endpoint = "horizontalpodautoscalers"
    kind = "HorizontalPodAutoscaler"
    plural = "horizontalpodautoscalers"
    singular = "horizontalpodautoscaler"
    namespaced = True

class CronJob(APIObject):
    """A Kubernetes CronJob."""

    version = "batch/v1"
    endpoint = "cronjobs"
    kind = "CronJob"
    plural = "cronjobs"
    singular = "cronjob"
    namespaced = True

class Job(APIObject):
    """A Kubernetes Job."""

    version = "batch/v1"
    endpoint = "jobs"
    kind = "Job"
    plural = "jobs"
    singular = "job"
    namespaced = True
    scalable = True
    scalable_spec = "parallelism"

class Ingress(APIObject):
    """A Kubernetes Ingress."""

    version = "networking.k8s.io/v1"
    endpoint = "ingresses"
    kind = "Ingress"
    plural = "ingresses"
    singular = "ingress"
    namespaced = True

class IngressClass(APIObject):
    """A Kubernetes IngressClass."""

    version = "networking.k8s.io/v1"
    endpoint = "ingressclasses"
    kind = "IngressClass"
    plural = "ingressclasses"
    singular = "ingressclass"
    namespaced = False

class NetworkPolicy(APIObject):
    """A Kubernetes NetworkPolicy."""

    version = "networking.k8s.io/v1"
    endpoint = "networkpolicies"
    kind = "NetworkPolicy"
    plural = "networkpolicies"
    singular = "networkpolicy"
    namespaced = True

class PodDisruptionBudget(APIObject):
    """A Kubernetes PodDisruptionBudget."""

    version = "policy/v1"
    endpoint = "poddisruptionbudgets"
    kind = "PodDisruptionBudget"
    plural = "poddisruptionbudgets"
    singular = "poddisruptionbudget"
    namespaced = True

class ClusterRoleBinding(APIObject):
    """A Kubernetes ClusterRoleBinding."""

    version = "rbac.authorization.k8s.io/v1"
    endpoint = "clusterrolebindings"
    kind = "ClusterRoleBinding"
    plural = "clusterrolebindings"
    singular = "clusterrolebinding"
    namespaced = False

class ClusterRole(APIObject):
    """A Kubernetes ClusterRole."""

    version = "rbac.authorization.k8s.io/v1"
    endpoint = "clusterroles"
    kind = "ClusterRole"
    plural = "clusterroles"
    singular = "clusterrole"
    namespaced = False

class RoleBinding(APIObject):
    """A Kubernetes RoleBinding."""

    version = "rbac.authorization.k8s.io/v1"
    endpoint = "rolebindings"
    kind = "RoleBinding"
    plural = "rolebindings"
    singular = "rolebinding"
    namespaced = True

class Role(APIObject):
    """A Kubernetes Role."""

    version = "rbac.authorization.k8s.io/v1"
    endpoint = "roles"
    kind = "Role"
    plural = "roles"
    singular = "role"
    namespaced = True

class CustomResourceDefinition(APIObject):
    """A Kubernetes CustomResourceDefinition."""

    version = "apiextensions.k8s.io/v1"
    endpoint = "customresourcedefinitions"
    kind = "CustomResourceDefinition"
    plural = "customresourcedefinitions"
    singular = "customresourcedefinition"
    namespaced = False

class Table(APIObject):
    """A Kubernetes Table."""

    version = "meta.k8s.io/v1"
    endpoint = "tables"
    kind = "Table"
    plural = "tables"
    singular = "table"
    namespaced = False

    @property
    def rows(self) -> list[dict]: ...
    @property
    def column_definitions(self) -> list[dict]: ...

def object_from_name_type(
    name: str,
    namespace: str | None = None,
    api: Api | None = None,
    _asyncio: bool = True,
) -> APIObject: ...
def objects_from_files(
    path: str | pathlib.Path,
    api: Api | None = None,
    recursive: bool = False,
    _asyncio: bool = True,
) -> list[APIObject]: ...
def get_class(
    kind: str, version: str | None = None, _asyncio: bool = True
) -> type[APIObject]: ...
def new_class(
    kind: str,
    version: str | None = None,
    asyncio: bool = True,
    namespaced=True,
    scalable: bool | None = None,
    scalable_spec: str | None = None,
    plural: str | None = None,
) -> type[APIObject]: ...
def object_from_spec(
    spec: dict,
    api: Api | None = None,
    allow_unknown_type: bool = False,
    _asyncio: bool = True,
) -> APIObject: ...
